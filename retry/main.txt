package main

import (
	"fmt"
	"piscine"

	"github.com/01-edu/z01"
)

func main() {
	fmt.Println(piscine.Atoi("12345"))
	fmt.Println(piscine.Atoi("0000000012345"))
	fmt.Println(piscine.Atoi("012 345"))
	fmt.Println(piscine.Atoi("Hello World!"))
	fmt.Println(piscine.Atoi("+1234"))
	fmt.Println(piscine.Atoi("-1234"))
	fmt.Println(piscine.Atoi("++1234"))
	fmt.Println(piscine.Atoi("--1234"))
}

func Atoi(s string) int {
	var result int
	for i, e := range s {
		if int(rune(e)) >= 48 && int(rune(e)) <= 57 || int(rune(e)) == '-' || int(rune(e)) == '+' {
			var negative bool
			if (e == '-' || e == '+') && i > 1 {
				return 0
			}
			if e == '-' {
				negative = true
			}
			signs := 0
			if e == '-' || e == '+' {
				signs++
			}
			ints := 0
			for i := '1'; i < e; i++ {
				ints++
			}
			result = result*10 + ints
			if signs > 1 {
				return 0
			}
			if negative == true {
				result = result * -1
			}
		}
	}
	return result
}

func MakeRange(min, max int) []int {
	result := make([]int, max-min)
	for i := range result {
		result[i] = i + 1
	}
	return result
}

func AppendRange(min, max int) []int {
	var result []int
	for i := min - 1; i < max-1; i++ {
		result = append(result, i+1)
	}
	return result
}

func Index(s string, toFind string) int {
	nice := len(s)
	hello := len(toFind)
	for i := 0; i <= nice-hello; i++ {
		if toFind == s[i:i+hello] {
			return i
		}
	}
	return -1
}

func AlphaCount(s string) int {
	var count int
	for _, j := range s {
		if j >= 'a' && j <= 'z' || j >= 'A' && j <= 'Z' {
			count++
		}
	}
	return count
}

func LastRune(s string) rune {
	runes := []rune(s)
	var nice int
	for i := 0; i < len(s); i++ {
		nice = i
	}
	return rune(runes[nice])
}

func FirstRune(s string) rune {
	return rune(s[0])
}

func Fibonacci(index int) int {
	if index < 0 {
		return -1
	}
	if index <= 1 {
		return index
	}
	return Fibonacci(index-1) + Fibonacci(index-2)
}

func RecursivePower(nb int, power int) int {
	if nb < 0 || nb > 21 || nb == 0 && power == 0 {
		return 0
	}
	if nb == 0 || power == 0 {
		return 1
	}
	return nb * RecursivePower(nb, power-1)
}

func IterativePower(nb int, power int) int {
	if nb < 0 || nb > 21 || nb == 0 && power == 0 {
		return 0
	}
	if nb == 0 || power == 0 {
		return 1
	}
	result := nb
	for i := 1; i < power; i++ {
		result = result * nb
	}
	return result
}

func RecursiveFactorial(nb int) int {
	if nb < 0 || nb > 21 {
		return 0
	}
	if nb == 0 {
		return 1
	}
	return nb * RecursiveFactorial(nb-1)
}

func IterativeFactorial(nb int) int {
	if nb < 0 || nb > 21 {
		return 0
	}
	if nb == 0 {
		return 1
	}
	result := nb
	for i := 1; i < nb; i++ {
		result = result * i
	}
	return result
}

func StrRev(s string) string {
	runes := []rune(s)
	for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return string(runes)
}

func Swap(a *int, b *int) {
	hello := *a
	nice := *b
	*a = nice
	*b = hello
}

func StrLen(s string) int {
	return len(s)
}

func PrintStr(s string) {
	for i := range s {
		z01.PrintRune(rune(s[i]))
	}
}

func UltimateDivMod(a *int, b *int) {
	hello := *a
	nice := *b
	*a = hello / nice
	*b = hello % nice

}

func DivMod(a int, b int, div *int, mod *int) {
	*div = a / b
	*mod = a % b
}

func UltimatePointOne(n ***int) {
	***n = 1
}

func PointOne(n *int) {
	*n = 1
}
